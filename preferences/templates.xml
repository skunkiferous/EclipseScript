<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="log error." enabled="true" name="logerr">LOG.error(${});&#13;
 ${cursor}</template><template autoinsert="true" context="java" deleted="false" description="inserts slf4j logger" enabled="true" name="logger">${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}&#13;
private static final Logger LOG = LoggerFactory.getLogger(${enclosing_type}.class);</template><template autoinsert="true" context="java" deleted="false" description="log statement with specified log level" enabled="true" name="loglevel">if(${log:var(java.util.logging.Logger)}.isLoggable(Level.${LEVEL})) {&#13;
 ${log:var(java.util.logging.Logger)}.${level}(${});&#13;
 }&#13;
 ${cursor}</template><template autoinsert="true" context="java-statements" deleted="false" description="log debug a variable" enabled="true" name="logvar">LOG.debug("${var} &gt;" + ${var}${});${cursor}</template><template autoinsert="true" context="java" deleted="false" description="iterate map keys." enabled="true" name="mapiterate">${:import(java.util.Iterator, &#13;
 java.util.Map)}&#13;
 for (Iterator&lt;Map.Entry&lt;${type},${type2}&gt;&gt; it = ${collection}.entrySet().iterator(); it.hasNext();) {&#13;
 Map.Entry&lt;${type},${type2}&gt; entry = it.next();&#13;
 ${type} key = entry.getKey();&#13;
 ${type2} value = entry.getValue();&#13;
 // do something with the key and the value&#13;
 }</template><template autoinsert="true" context="java-statements" deleted="false" description="print variable to sys out" enabled="true" name="printvar">System.out.println("${var} &gt;" + ${var}${});${cursor}</template><template autoinsert="true" context="java" deleted="false" description="code template to read a file." enabled="true" name="readfile">${:import(java.io.BufferedReader, &#13;
 java.io.FileNotFoundException, &#13;
 java.io.FileReader, &#13;
 java.io.IOException)} &#13;
 BufferedReader in = null; &#13;
 try { &#13;
 in = new BufferedReader(new FileReader(${fileName})); &#13;
 String line; &#13;
 while ((line = in.readLine()) != null) { &#13;
 ${process} &#13;
 } &#13;
 } &#13;
 catch (FileNotFoundException e) { &#13;
 LOG.error(e.getMessage(), e) ; &#13;
 } &#13;
 catch (IOException e) { &#13;
 LOG.error(e.getMessage(), e) ; &#13;
 } finally { &#13;
 if(in != null) &#13;
{try{in.close();}catch(IOException e){}} &#13;
 } &#13;
 ${cursor}</template></templates>